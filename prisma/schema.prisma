// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"  // Changed from "mysql"
  url      = env("DATABASE_URL")
}

// NextAuth required tables
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // Removed @db.Text (PostgreSQL handles this automatically)
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  password      String?   // Removed @db.VarChar(255) - PostgreSQL handles this
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  
  // User's moderation requests
  moderationRequests ModerationRequest[]
  
  // Link to authorization
  authorizedUser AuthorizedUser?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Authorization model
model AuthorizedUser {
  id          String   @id @default(cuid())
  email       String   @unique
  name        String?
  role        String   @default("moderator") // 'admin', 'moderator'
  isActive    Boolean  @default(true)
  addedBy     String?  // Email of admin who added this user
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Link to User if they have signed in
  userId      String?  @unique
  user        User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  @@index([email])
  @@index([isActive])
}

// Custom tables for your app
model ModerationRequest {
  id            String   @id @default(cuid())
  userId        String
  content       String   // Removed @db.Text - PostgreSQL handles this
  cocViolation  Boolean
  nsfw          Boolean
  rubbish       Boolean
  feedback      String   // Removed @db.Text
  status        String   // 'approved', 'flagged', 'blocked'
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([status])
  @@index([createdAt])
}



// // This is your Prisma schema file,
// // learn more about it in the docs: https://pris.ly/d/prisma-schema

// // Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// // Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// generator client {
//   provider = "prisma-client-js"
// }

// datasource db {
//   provider = "mysql"
//   url      = env("DATABASE_URL")
// }

// // NextAuth required tables
// model Account {
//   id                String  @id @default(cuid())
//   userId            String
//   type              String
//   provider          String
//   providerAccountId String
//   refresh_token     String? @db.Text
//   access_token      String? @db.Text
//   expires_at        Int?
//   token_type        String?
//   scope             String?
//   id_token          String? @db.Text
//   session_state     String?

//   user User @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@unique([provider, providerAccountId])
// }

// model Session {
//   id           String   @id @default(cuid())
//   sessionToken String   @unique
//   userId       String
//   expires      DateTime
//   user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
// }

// model User {
//   id            String    @id @default(cuid())
//   name          String?
//   email         String?   @unique
//   password      String?   @db.VarChar(255)
//   emailVerified DateTime?
//   image         String?
//   createdAt     DateTime  @default(now())
//   updatedAt     DateTime  @updatedAt
//   accounts      Account[]
//   sessions      Session[]
  
//   // User's moderation requests
//   moderationRequests ModerationRequest[]
  
//   // Link to authorization
//   authorizedUser AuthorizedUser?
// }

// model VerificationToken {
//   identifier String
//   token      String   @unique
//   expires    DateTime

//   @@unique([identifier, token])
// }

// // Authorization model
// model AuthorizedUser {
//   id          String   @id @default(cuid())
//   email       String   @unique
//   name        String?
//   role        String   @default("moderator") // 'admin', 'moderator'
//   isActive    Boolean  @default(true)
//   addedBy     String?  // Email of admin who added this user
//   createdAt   DateTime @default(now())
//   updatedAt   DateTime @updatedAt
  
//   // Link to User if they have signed in
//   userId      String?  @unique
//   user        User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  
//   @@index([email])
//   @@index([isActive])
// }

// // Custom tables for your app
// model ModerationRequest {
//   id            String   @id @default(cuid())
//   userId        String
//   content       String   @db.Text
//   cocViolation  Boolean
//   nsfw          Boolean
//   rubbish       Boolean
//   feedback      String   @db.Text
//   status        String   // 'approved', 'flagged', 'blocked'
//   createdAt     DateTime @default(now())
//   updatedAt     DateTime @updatedAt
  
//   user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
//   @@index([userId])
//   @@index([status])
//   @@index([createdAt])
// }